{"name":"3ds-sails","tagline":"Nintendo 3ds Screen Canvas Get, Set for Pixel, Region","body":"# 3DS Sails \r\n  \r\n####24bit \"true-colour\" Canvas for the Nintendo 3DS platform.\r\n####versatile get & set for both pixel or rectangular regions. \r\n####Use Text, Lines, Boxes, Polygons, Circles & tilted Ellipse.\r\n####\"Elegant\" use of left, right, bottom & ... gfxFramebuffer's as your blank canvas.\r\n\r\nAll source Code with exception of \"Dual_for\" presented has undergone debuging & passed Eg. is functional/usable.  \r\nThe *.c Sources & snippets presented how ever broken, assume an intermediate++ knowledge \"C\" for thire usage!  \r\nTo steno-graph, laymen others a \"glips &or new appreciation for the work involved in building an implemention\" and not scarcely fathom just the *.h header/interface's! & if you don't like it; Well then; walk the plank! \r\n  \r\n& too many other authours && engineers && pro-liter-riot's mentioned here or not through out \r\n\"A very sincere Thank-You\"!  \r\n\r\nS.V.P. Any Questions, requests &or proposals can be sent via email!   \r\n\r\nto: kennyd.lee@outlook.com  \r\nor Bcc undead.kennyd@gmail.com, KennyD@mail.com   \r\nSubject: Nintendo 3DS Sails ...  \r\n\r\n[Etymology-->](https://en.wikipedia.org/wiki/Canvas#Etymology)   \r\nThe word \"canvas\" is derived from the 13th century Anglo-French canevaz and the Old French canevas. Both may be derivatives of the Vulgar Latin cannapaceus for \"made of hemp,\" originating from the Greek κάνναβις (cannabis)\r\n\r\n##[Pixel usage/demo](https://www.facebook.com/1596037147331761/photos/a.1629176367351172.1073741828.1596037147331761/1636255289976613/?type=1&theater)\r\n```\r\n\tscreenTopLeft = gfxGetFramebuffer(GFX_TOP, GFX_LEFT, NULL, NULL); \r\n\tscreenTopRight = gfxGetFramebuffer(GFX_TOP, GFX_RIGHT, NULL, NULL); \r\n\r\n//test pattern 1st pass  \r\nfor (i = 0; i < 79; ++i)  \r\n for (j = 0; j < 200; ++j)  \r\n\t{  \r\n        SetCanvasPixel(screenTopLeft,i,j,RED);  \r\n                                SetCanvasPixel(screenTopRight,i,j,RED);  \r\n                                SetCanvasPixel(screenTopLeft,i+80,j,CYAN);  \r\n                                SetCanvasPixel(screenTopRight,i+80,j,CYAN);  \r\n                                SetCanvasPixel(screenTopLeft,i+160,j,YELLOW);  \r\n                                SetCanvasPixel(screenTopRight,i+160,j,YELLOW);  \r\n                                SetCanvasPixel(screenTopLeft,i+240,j,BLACK);  \r\n                                SetCanvasPixel(screenTopRight,i+240,j,BLACK);  \r\n                                SetCanvasPixel(screenTopLeft,i+320,j,BLUE);  \r\n                                SetCanvasPixel(screenTopRight,i+320,j,BLUE);  \r\n\t\t\t\t};  \r\n//test pattern 2nd pass   \r\nfor (i = 0; i < 99; ++i)  \r\n for (j = 201; j < 239; ++j)  \r\n\t{  \r\n                                SetCanvasPixel(screenTopLeft,i,j,PINK);  \r\n                                SetCanvasPixel(screenTopRight,i,j,PINK);  \r\n                                SetCanvasPixel(screenTopLeft,i+100,j,LIGHT_GREEN);  \r\n                                SetCanvasPixel(screenTopRight,i+100,j,LIGHT_GREEN);  \r\n                                SetCanvasPixel(screenTopLeft,i+200,j,WHITE);  \r\n                                SetCanvasPixel(screenTopRight,i+200,j,WHITE);  \r\n                                SetCanvasPixel(screenTopLeft,i+300,j,ORANGE);  \r\n                                SetCanvasPixel(screenTopRight,i+300,j,ORANGE);  \r\n\t\t\t\t}  \r\n\r\n\t\t\t\tgfxFlushBuffers();\r\n\t\t\t\t//gfxSwapBuffers();\r\n```\r\n##[Pixel usage/demo II](https://www.facebook.com/1596037147331761/photos/a.1629176367351172.1073741828.1596037147331761/1636836319918510/?type=1&theater) \r\n```\r\n   switch(GetCanvasPixel(screenTopLeft,x,y))  \r\n  {   \r\n \tcase RED: text_print(screenBottom, \"Sampled a RED\",100,120); break;  \r\n\tcase GREEN: text_print(screenBottom, \"Sampled a GREEN\",100,120); break;  \r\n \tcase BLUE: text_print(screenBottom, \"Sampled a BLUE\",100,120); break;  \r\n \tcase CYAN: text_print(screenBottom, \"Sampled a CYAN\",100,120); break;  \r\n \tcase PINK: text_print(screenBottom, \"Sampled a PINK\",100,120); break;  \r\n \tcase YELLOW: text_print(screenBottom, \"Sampled a YELLOW\",100,120); break;  \r\n \tcase BLACK: text_print(screenBottom, \"Sampled a BLACK\",100,120); break;  \r\n \tcase WHITE: text_print(screenBottom, \"Sampled a WHITE\",100,120); break;   \r\n \tcase ORANGE: text_print(screenBottom, \"Sampled a ORANGE\",100,120); break;  \r\n \tcase LIGHT_GREEN: text_print(screenBottom, \"Sampled a LIGHT GREEN\",100,120); break;   \r\n \tcase PURPLE: text_print(screenBottom, \"Sampled a PURPLE\",100,120); break;  \r\n\tdefault:   \r\n                ClearCanvas(screenBottom, BLACK);  \r\n\t\tbreak;  \r\n  }  \r\n  ```\r\n##Primitive shapes usage/demo  \r\n//Cracker; and the world is full of them; want a polygon?  \r\n```\r\n  \t\t\t\tline(screenTopLeft, 0, 239, 399, 0, PINK);  \r\n\t\t\t  \tline(screenTopRight, 0, 0, 399, 239, PINK);  \r\n\t\t\t\tCircle(screenTopLeft, 50, 50, 10, BLUE);     \r\n\t\t\t\tCircle(screenTopRight, 349, 50, 10, RED);      \r\n\t\t\t\tEllipse(screenTopLeft, 50, 150, 20, 10, 45, RED); \r\n\t\t\t\tEllipse(screenTopRight, 349, 150, 20, 10, 135, BLUE); \r\n\r\n\t\t\t\tgfxFlushBuffers();  \r\n```\r\n##[Primitive shapes usage/demo II](https://www.facebook.com/1596037147331761/photos/a.1629176367351172.1073741828.1596037147331761/1638563179745824/?type=3&theater)\r\n```\r\n   int * shape[6];   /* our polygon array */\r\n\r\n    shape[0] = 20;    /* first vertex */\r\n    shape[1] = 20;\r\n    shape[2] = 20;    /* second vertex */\r\n    shape[3] = 60;\r\n    shape[4] = 140;   /* third vertex */\r\n    shape[5] = 80;\r\n  \r\n//   shape[4] = shape[0];      /* our's automatically close */  \r\n//   shape[5] = shape[1];      /* the polygon, so we don't need bother*/  \r\n \r\n   poly(screenTopLeft, shape, 5, LIGHT_GREEN);    \r\n   poly(screenTopRight, shape, 5, LIGHT_GREEN);  \r\n   box(screenTopLeft, 70, 90, 260, 40, WHITE);   \r\n   box(screenTopRight, 70, 90, 260, 40, WHITE);   \r\n```\r\n##Rectangular-Region usage/demo\r\n```\r\n//Proforms memory clean-up all cases. What if wii need in 1/2 time repeated usage of ...\r\n  SetRecRe(screenBottom,10,10,80,80,GetRecRe(screenTopLeft,10,10,80,80));\r\n  SetRecRe(screenBottom,10,150,80,80,GetRecRe(screenTopRight,10,310,80,80)); \r\n```\r\n##Rectangular-Region extended usage/demo II \r\n//still in debug\r\n```\r\n//u8* Recbufl = (u8*)linearMemAlign(bitmapsize, 0x8);  \r\nRecbufl= (u8*)GetRecEx(screenTopLeft,10,10,80,80,linear); // patterns & tiles ?  \r\n//& about args 7th boolean cleanup, 8th RamType (1=vram or 0=linear)    \r\nSetRecEx(screenBottom,10,10,80,80, Recbufl, 0, linear);    \r\n//looks like wii Have to GetRecEx(buff) over & ... anyways? vram !work && freeze 3ds  \r\n//SetRecEx(screenBottom,10,100,80,80, Recbufl, 0, linear); repeated or subsiquent calls have no-eval  \r\nlinearFree(Recbufl); //manual CleanUp\r\n```\r\n#Ps. Mysterio is nothing more than pawn,    \r\n#So tell your %^#@ing Spider-Woman!!!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}